application.homepage=https://github.com/Benehiko/ocr-core
auxiliary.org-netbeans-spi-editor-hints-projects.perProjectHintSettingsFile=nbproject/cfg_hints.xml
jar.archive.disabled=${jnlp.enabled}
jar.index=${jnlp.enabled}
#Wed Mar 14 22:07:07 SAST 2018
javadoc.splitindex=true
build.classes.excludes=**/*.java,**/*.form
javadoc.author=true
build.sysclasspath=ignore
javac.target=1.8
build.generated.dir=${build.dir}/generated
jnlp.codebase.type=no.codebase
jnlp.descriptor=application
jnlp.enabled=false
jnlp.mixed.code=default
jnlp.offline-allowed=false
jnlp.signed=false
jnlp.signing=
jnlp.signing.alias=
jnlp.signing.keystore=
# Optional override of default Application-Library-Allowable-Codebase attribute identifying the locations where your signed RIA is expected to be found.
manifest.custom.application.library.allowable.codebase=
# Optional override of default Caller-Allowable-Codebase attribute identifying the domains from which JavaScript code can make calls to your RIA without security prompts.
manifest.custom.caller.allowable.codebase=
# Optional override of default Codebase manifest attribute, use to prevent RIAs from being repurposed
manifest.custom.codebase=
# Optional override of default Permissions manifest attribute (supported values: sandbox, all-permissions)
manifest.custom.permissions=
native.bundling.enabled=true
run.classpath=\
    ${javac.classpath}:\
    ${build.classes.dir}
debug.test.classpath=${run.test.classpath}
build.dir=build
javac.deprecation=false
test.src.dir=test
junit.selected.version=4
includes=**
application.vendor=benehiko
mkdist.disabled=false
jar.compress=true
javac.external.vm=true
annotation.processing.processors.list=
javadoc.version=true
build.classes.dir=${build.dir}/classes
dist.dir=dist
manifest.file=manifest.mf
javac.source=1.8
run.jvmargs=
javac.test.processorpath=${javac.test.classpath}
dist.archive.excludes=
run.test.classpath=\
    ${javac.test.classpath}:\
    ${build.test.classes.dir}
build.generated.sources.dir=${build.dir}/generated-sources
javadoc.notree=false
dist.jar=${dist.dir}/ocr-core.jar
platform.active=default_platform
annotation.processing.enabled=true
main.class=ocr.core.TestDriver
dist.javadoc.dir=${dist.dir}/javadoc
javadoc.additionalparam=
javac.classpath=\
    ${libs.tesseract.classpath}:\
    ${libs.im4java.classpath}:\
    ${libs.javacv.classpath}:\
    ${libs.processing.classpath}
javadoc.noindex=false
annotation.processing.enabled.in.editor=false
javadoc.private=true
javadoc.encoding=${source.encoding}
build.test.classes.dir=${build.dir}/test/classes
javac.compilerargs=
source.encoding=UTF-8
meta.inf.dir=${src.dir}/META-INF
annotation.processing.run.all.processors=true
excludes=
application.title=ocr-core
javac.processorpath=\
    ${javac.classpath}
build.test.results.dir=${build.dir}/test/results
javadoc.use=true
endorsed.classpath=
javadoc.nonavbar=false
javadoc.windowtitle=ocr-core library written by benehiko
javac.test.classpath=\
    ${javac.classpath}:\
    ${build.classes.dir}:\
    ${libs.junit_4.classpath}:\
    ${libs.hamcrest.classpath}
src.dir=src
annotation.processing.source.output=${build.generated.sources.dir}/ap-source-output
debug.classpath=${run.classpath}
